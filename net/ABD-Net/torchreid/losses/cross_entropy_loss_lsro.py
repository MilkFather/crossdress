from __future__ import absolute_import
from __future__ import division

import torch
import torch.nn as nn


class CrossEntropyLossLSRO(nn.Module):
    """Cross entropy loss with label smoothing regularization for outliers.

    Reference:
    Zhang et al. Unlabeled Samples Generated by GAN Improve the Person Re-identification Baseline in vitro. CVPR 2017.

    Args:
    - num_classes (int): number of classes
    - epsilon (float): weight
    - use_gpu (bool): whether to use gpu devices
    - label_smooth (bool): whether to apply label smoothing, if False, epsilon = 0
    """

    def __init__(self, num_classes, epsilon=0.1, use_gpu=True, label_smooth=True):
        super(CrossEntropyLossLSRO, self).__init__()
        self.num_classes = num_classes
        self.epsilon = epsilon if label_smooth else 0
        self.use_gpu = use_gpu
        self.logsoftmax = nn.LogSoftmax(dim=1)

    def apply_loss(self, inputs, targets, gen_info):

        log_probs = self.logsoftmax(inputs)

        print(gen_info)

        targets2 = torch.zeros(log_probs.size())
        for idx, label in enumerate(gen_info):
            if len(label) == 1:
                targets2[idx, label[0]] += 1
            elif len(label) == 2:
                targets2[idx, label[0]] += 1 / 2
                targets2[idx, label[1]] += 1 / 2
            elif len(label) == 3:
                targets2[idx, label[0]] += 1 / 3
                targets2[idx, label[1]] += 1 / 3
                targets2[idx, label[2]] += 1 / 3
        if self.use_gpu:
            targets2 = targets2.cuda()
        targets2 = (1 - self.epsilon) * targets2 + self.epsilon / self.num_classes
        print(targets2)
        loss = (- targets2 * log_probs).mean(0).sum()
        return loss

    def _forward(self, inputs, targets, gen_info):
        """
        Args:
        - inputs: prediction matrix (before softmax) with shape (batch_size, num_classes)
        - targets: ground truth labels with shape (batch_size)
        - gen_info: information on how the image is from
        """

        if not isinstance(inputs, tuple):
            inputs_tuple = (inputs,)
        else:
            inputs_tuple = inputs

        return sum([self.apply_loss(x, targets, gen_info) for x in inputs_tuple]) / len(inputs_tuple)

    def forward(self, inputs, targets, gen_info):

        return self._forward(inputs[1], targets, gen_info)
